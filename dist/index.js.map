{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\n\ninterface GeneratorOptions {\n  actions?: string[];\n  skipController?: boolean;\n  skipService?: boolean;\n  skipRepository?: boolean;\n  outputDir?: string; // Target directory for generation\n}\n\nexport function generateProject(name: string) {\n  const baseDir = path.join(process.cwd(), name);\n\n  const structure = [\n    \"src/domain/entities\",\n    \"src/domain/value_objects\",\n    \"src/domain/repositories\",\n    \"src/domain/events\",\n    \"src/application/dto\",\n    \"src/application/services\",\n    \"src/infrastructure/repositories\",\n    \"src/infrastructure/db\",\n    \"src/infrastructure/redis\",\n    \"src/infrastructure/messaging\",\n    \"src/infrastructure/config\",\n    \"src/interfaces/http\",\n    \"src/interfaces/graphql\",\n    \"src/interfaces/cli\",\n    \"src/shared/errors\",\n    \"src/shared/utils\",\n    \"src/shared/constants\"\n  ];\n\n  structure.forEach((dir) => {\n    fs.mkdirSync(path.join(baseDir, dir), { recursive: true });\n  });\n\n  const entryCandidates = [\n    \"src/main.ts\",\n    \"src/app.ts\",\n    \"src/index.ts\",\n    \"server.js\",\n    \"app.js\",\n    \"index.js\"\n  ];\n\n  let entryFile: string | null = null;\n\n  for (const candidate of entryCandidates) {\n    const candidatePath = path.join(baseDir, candidate);\n    if (fs.existsSync(candidatePath)) {\n      entryFile = candidatePath;\n      break;\n    }\n  }\n\n  if (!entryFile) {\n    entryFile = path.join(baseDir, \"src/main.ts\");\n    fs.writeFileSync(entryFile, \"// entry point\\n\");\n    console.log(`‚ÑπÔ∏è No entry file found. Created default at ${entryFile}`);\n  } else {\n    console.log(`‚ÑπÔ∏è Found existing entry file at ${entryFile}`);\n  }\n\n  console.log(`‚úÖ Project ${name} generated successfully!`);\n}\n\nexport function setupDDD(targetDir: string = './src') {\n  const resolvedDir = path.resolve(targetDir);\n  console.log(`üìÅ Setting up DDD structure at ${resolvedDir}`);\n  setupDDDStructure(resolvedDir);\n  console.log(`‚úÖ DDD structure created successfully!`);\n}\n\nfunction setupDDDStructure(baseDir: string) {\n  const structure = [\n    \"domain/entities\",\n    \"domain/value_objects\", \n    \"domain/repositories\",\n    \"domain/events\",\n    \"application/dto\",\n    \"application/services\",\n    \"infrastructure/repositories\",\n    \"infrastructure/db\",\n    \"infrastructure/redis\",\n    \"infrastructure/messaging\",\n    \"infrastructure/config\",\n    \"interfaces/http\",\n    \"interfaces/graphql\",\n    \"interfaces/cli\",\n    \"shared/errors\",\n    \"shared/utils\",\n    \"shared/constants\"\n  ];\n\n  structure.forEach((dir) => {\n    const fullPath = path.join(baseDir, dir);\n    if (!fs.existsSync(fullPath)) {\n      fs.mkdirSync(fullPath, { recursive: true });\n    }\n  });\n}\n\nexport function generateModule(moduleName: string, options: GeneratorOptions = {}) {\n  const {\n    actions = [\"index\", \"show\", \"create\", \"update\", \"destroy\"],\n    skipController = false,\n    skipService = false,\n    skipRepository = false,\n    outputDir\n  } = options;\n\n  // Determine target directory\n  const baseDir = outputDir ? path.resolve(outputDir) : process.cwd();\n  const srcPath = outputDir ? baseDir : path.join(baseDir, \"src\");\n\n  // Check if target directory exists, if not create DDD structure\n  if (!fs.existsSync(srcPath)) {\n    if (outputDir) {\n      console.log(`üìÅ Creating DDD structure at ${srcPath}`);\n      setupDDDStructure(srcPath);\n    } else {\n      console.log(\"‚ùå Not in a DDD project directory. Run 'create-ddd-app new <project-name>' first or specify outputDir.\");\n      return;\n    }\n  }\n\n  const createdFiles: string[] = [];\n\n  // 1. Generate Entity\n  const entityPath = path.join(srcPath, \"domain/entities\", `${moduleName}.entity.ts`);\n  fs.writeFileSync(entityPath, generateEntityTemplate(moduleName));\n  createdFiles.push(entityPath);\n\n  // 2. Generate Value Objects (if needed)\n  const valueObjectPath = path.join(srcPath, \"domain/value_objects\", `${moduleName}.value-object.ts`);\n  fs.writeFileSync(valueObjectPath, generateValueObjectTemplate(moduleName));\n  createdFiles.push(valueObjectPath);\n\n  // 3. Generate Repository Interface\n  if (!skipRepository) {\n    const repoInterfacePath = path.join(srcPath, \"domain/repositories\", `${moduleName}.repository.ts`);\n    fs.writeFileSync(repoInterfacePath, generateRepositoryInterfaceTemplate(moduleName, actions));\n    createdFiles.push(repoInterfacePath);\n\n    // Generate Repository Implementation\n    const repoImplPath = path.join(srcPath, \"infrastructure/repositories\", `${moduleName}.repository.impl.ts`);\n    fs.writeFileSync(repoImplPath, generateRepositoryImplTemplate(moduleName, actions));\n    createdFiles.push(repoImplPath);\n  }\n\n  // 4. Generate DTOs\n  const dtoPath = path.join(srcPath, \"application/dto\", `${moduleName}.dto.ts`);\n  fs.writeFileSync(dtoPath, generateDtoTemplate(moduleName, actions));\n  createdFiles.push(dtoPath);\n\n  // 5. Generate Service (Application Layer)\n  if (!skipService) {\n    const servicePath = path.join(srcPath, \"application/services\", `${moduleName}.service.ts`);\n    fs.writeFileSync(servicePath, generateServiceTemplate(moduleName, actions));\n    createdFiles.push(servicePath);\n  }\n\n  // 6. Generate Controller\n  if (!skipController) {\n    const controllerPath = path.join(srcPath, \"interfaces/http\", `${moduleName}.controller.ts`);\n    fs.writeFileSync(controllerPath, generateControllerTemplate(moduleName, actions));\n    createdFiles.push(controllerPath);\n\n    // Generate Routes\n    const routesPath = path.join(srcPath, \"interfaces/http\", `${moduleName}.routes.ts`);\n    fs.writeFileSync(routesPath, generateRoutesTemplate(moduleName, actions));\n    createdFiles.push(routesPath);\n  }\n\n  // Print created files\n  console.log(`‚úÖ Generated ${moduleName} module:`);\n  createdFiles.forEach(file => {\n    const relativePath = path.relative(baseDir, file);\n    console.log(`   create  ${relativePath}`);\n  });\n}\n\n// Template Functions\nfunction generateEntityTemplate(moduleName: string): string {\n  const className = toPascalCase(moduleName);\n  return `// Created at: ${new Date().toISOString()}\n// Creator: create-ddd-app\n\nexport class ${className}Entity {\n  constructor(\n    public readonly id: string,\n    public readonly createdAt: Date,\n    public readonly updatedAt: Date\n  ) {}\n\n  // Add your entity properties and methods here\n}\n`;\n}\n\nfunction generateValueObjectTemplate(moduleName: string): string {\n  const className = toPascalCase(moduleName);\n  return `// Created at: ${new Date().toISOString()}\n// Creator: create-ddd-app\n\nexport class ${className}ValueObject {\n  constructor(public readonly value: string) {\n    this.validate(value);\n  }\n\n  private validate(value: string): void {\n    if (!value || value.trim().length === 0) {\n      throw new Error('${className} value cannot be empty');\n    }\n  }\n\n  equals(other: ${className}ValueObject): boolean {\n    return this.value === other.value;\n  }\n}\n`;\n}\n\nfunction generateRepositoryInterfaceTemplate(moduleName: string, actions: string[]): string {\n  const className = toPascalCase(moduleName);\n  const entityName = `${className}Entity`;\n  \n  let methods = '';\n  if (actions.includes('index')) {\n    methods += `  findAll(): Promise<${entityName}[]>;\\n`;\n  }\n  if (actions.includes('show')) {\n    methods += `  findById(id: string): Promise<${entityName} | null>;\\n`;\n  }\n  if (actions.includes('create')) {\n    methods += `  create(entity: Omit<${entityName}, 'id' | 'createdAt' | 'updatedAt'>): Promise<${entityName}>;\\n`;\n  }\n  if (actions.includes('update')) {\n    methods += `  update(id: string, data: Partial<${entityName}>): Promise<${entityName} | null>;\\n`;\n  }\n  if (actions.includes('destroy')) {\n    methods += `  delete(id: string): Promise<boolean>;\\n`;\n  }\n\n  return `// Created at: ${new Date().toISOString()}\n// Creator: create-ddd-app\n\nimport { ${entityName} } from '../entities/${moduleName}.entity';\n\nexport interface ${className}Repository {\n${methods}}\n`;\n}\n\nfunction generateRepositoryImplTemplate(moduleName: string, actions: string[]): string {\n  const className = toPascalCase(moduleName);\n  const entityName = `${className}Entity`;\n  \n  let methods = '';\n  if (actions.includes('index')) {\n    methods += `\n  async findAll(): Promise<${entityName}[]> {\n    // TODO: Implement database query\n    throw new Error('Method not implemented');\n  }\n`;\n  }\n  if (actions.includes('show')) {\n    methods += `\n  async findById(id: string): Promise<${entityName} | null> {\n    // TODO: Implement database query\n    throw new Error('Method not implemented');\n  }\n`;\n  }\n  if (actions.includes('create')) {\n    methods += `\n  async create(data: Omit<${entityName}, 'id' | 'createdAt' | 'updatedAt'>): Promise<${entityName}> {\n    // TODO: Implement database insert\n    throw new Error('Method not implemented');\n  }\n`;\n  }\n  if (actions.includes('update')) {\n    methods += `\n  async update(id: string, data: Partial<${entityName}>): Promise<${entityName} | null> {\n    // TODO: Implement database update\n    throw new Error('Method not implemented');\n  }\n`;\n  }\n  if (actions.includes('destroy')) {\n    methods += `\n  async delete(id: string): Promise<boolean> {\n    // TODO: Implement database delete\n    throw new Error('Method not implemented');\n  }\n`;\n  }\n\n  return `// Created at: ${new Date().toISOString()}\n// Creator: create-ddd-app\n\nimport { ${className}Repository } from '../../domain/repositories/${moduleName}.repository';\nimport { ${entityName} } from '../../domain/entities/${moduleName}.entity';\n\nexport class ${className}RepositoryImpl implements ${className}Repository {${methods}}\n`;\n}\n\nfunction generateDtoTemplate(moduleName: string, actions: string[]): string {\n  const className = toPascalCase(moduleName);\n  \n  let dtos = `// Created at: ${new Date().toISOString()}\n// Creator: create-ddd-app\n\n`;\n\n  if (actions.includes('create')) {\n    dtos += `export interface Create${className}Dto {\n  // Add your create DTO properties here\n}\n\n`;\n  }\n\n  if (actions.includes('update')) {\n    dtos += `export interface Update${className}Dto {\n  // Add your update DTO properties here\n}\n\n`;\n  }\n\n  dtos += `export interface ${className}ResponseDto {\n  id: string;\n  createdAt: string;\n  updatedAt: string;\n  // Add your response DTO properties here\n}\n`;\n\n  return dtos;\n}\n\nfunction generateServiceTemplate(moduleName: string, actions: string[]): string {\n  const className = toPascalCase(moduleName);\n  \n  let methods = '';\n  if (actions.includes('index')) {\n    methods += `\n  async findAll() {\n    return await this.${moduleName}Repository.findAll();\n  }\n`;\n  }\n  if (actions.includes('show')) {\n    methods += `\n  async findById(id: string) {\n    return await this.${moduleName}Repository.findById(id);\n  }\n`;\n  }\n  if (actions.includes('create')) {\n    methods += `\n  async create(data: Create${className}Dto) {\n    // TODO: Add business logic validation\n    return await this.${moduleName}Repository.create(data);\n  }\n`;\n  }\n  if (actions.includes('update')) {\n    methods += `\n  async update(id: string, data: Update${className}Dto) {\n    // TODO: Add business logic validation\n    return await this.${moduleName}Repository.update(id, data);\n  }\n`;\n  }\n  if (actions.includes('destroy')) {\n    methods += `\n  async delete(id: string) {\n    return await this.${moduleName}Repository.delete(id);\n  }\n`;\n  }\n\n  return `// Created at: ${new Date().toISOString()}\n// Creator: create-ddd-app\n\nimport { ${className}Repository } from '../../domain/repositories/${moduleName}.repository';\nimport { Create${className}Dto, Update${className}Dto } from '../dto/${moduleName}.dto';\n\nexport class ${className}Service {\n  constructor(private readonly ${moduleName}Repository: ${className}Repository) {}\n${methods}}\n`;\n}\n\nfunction generateControllerTemplate(moduleName: string, actions: string[]): string {\n  const className = toPascalCase(moduleName);\n  \n  let methods = '';\n  if (actions.includes('index')) {\n    methods += `\n  async index(req: Request, res: Response) {\n    try {\n      const result = await this.${moduleName}Service.findAll();\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ error: error.message });\n    }\n  }\n`;\n  }\n  if (actions.includes('show')) {\n    methods += `\n  async show(req: Request, res: Response) {\n    try {\n      const { id } = req.params;\n      const result = await this.${moduleName}Service.findById(id);\n      if (!result) {\n        return res.status(404).json({ error: '${className} not found' });\n      }\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ error: error.message });\n    }\n  }\n`;\n  }\n  if (actions.includes('create')) {\n    methods += `\n  async create(req: Request, res: Response) {\n    try {\n      const result = await this.${moduleName}Service.create(req.body);\n      res.status(201).json(result);\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  }\n`;\n  }\n  if (actions.includes('update')) {\n    methods += `\n  async update(req: Request, res: Response) {\n    try {\n      const { id } = req.params;\n      const result = await this.${moduleName}Service.update(id, req.body);\n      if (!result) {\n        return res.status(404).json({ error: '${className} not found' });\n      }\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  }\n`;\n  }\n  if (actions.includes('destroy')) {\n    methods += `\n  async destroy(req: Request, res: Response) {\n    try {\n      const { id } = req.params;\n      const success = await this.${moduleName}Service.delete(id);\n      if (!success) {\n        return res.status(404).json({ error: '${className} not found' });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: error.message });\n    }\n  }\n`;\n  }\n\n  return `// Created at: ${new Date().toISOString()}\n// Creator: create-ddd-app\n\nimport { Request, Response } from 'express';\nimport { ${className}Service } from '../../application/services/${moduleName}.service';\n\nexport class ${className}Controller {\n  constructor(private readonly ${moduleName}Service: ${className}Service) {}\n${methods}}\n`;\n}\n\nfunction generateRoutesTemplate(moduleName: string, actions: string[]): string {\n  const className = toPascalCase(moduleName);\n  \n  let routes = '';\n  if (actions.includes('index')) {\n    routes += `router.get('/', ${moduleName}Controller.index.bind(${moduleName}Controller));\\n`;\n  }\n  if (actions.includes('show')) {\n    routes += `router.get('/:id', ${moduleName}Controller.show.bind(${moduleName}Controller));\\n`;\n  }\n  if (actions.includes('create')) {\n    routes += `router.post('/', ${moduleName}Controller.create.bind(${moduleName}Controller));\\n`;\n  }\n  if (actions.includes('update')) {\n    routes += `router.put('/:id', ${moduleName}Controller.update.bind(${moduleName}Controller));\\n`;\n  }\n  if (actions.includes('destroy')) {\n    routes += `router.delete('/:id', ${moduleName}Controller.destroy.bind(${moduleName}Controller));\\n`;\n  }\n\n  return `// Created at: ${new Date().toISOString()}\n// Creator: create-ddd-app\n\nimport { Router } from 'express';\nimport { ${className}Controller } from './${moduleName}.controller';\nimport { ${className}Service } from '../../application/services/${moduleName}.service';\nimport { ${className}RepositoryImpl } from '../../infrastructure/repositories/${moduleName}.repository.impl';\n\nconst router = Router();\n\n// Dependency injection setup\nconst ${moduleName}Repository = new ${className}RepositoryImpl();\nconst ${moduleName}Service = new ${className}Service(${moduleName}Repository);\nconst ${moduleName}Controller = new ${className}Controller(${moduleName}Service);\n\n// Routes\n${routes}\nexport default router;\n`;\n}\n\n// Helper function\nfunction toPascalCase(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n}\n\n// Export types for library usage\nexport type { GeneratorOptions };\n\n// Main library interface\nexport const DDD = {\n  generateProject,\n  generateModule,\n  setupDDD,\n  // Helper utilities\n  utils: {\n    toPascalCase\n  }\n};\n\n// Default export\nexport default DDD;\n"],"mappings":"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","names":[]}